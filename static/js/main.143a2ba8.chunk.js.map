{"version":3,"sources":["Components/ListItem.jsx","Components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","Home","handleChange","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","newItems","console","log","filterItem","filter","editItem","onSubmit","this","placeholder","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAqCeA,MAhCf,SAAkBC,GAChB,IAEMC,EAFQD,EAAME,MAEIC,KAAI,SAAAC,GAC1B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KACzCC,SACI,SAACC,GAAD,OAAMZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAGnD,8BACE,kBAAC,IAAD,CACED,UAAU,UACVU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAOjD,OACE,6BACA,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,K,eCxBLmB,IAAQC,IAAIC,K,IAgFGC,E,kDA7Eb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAWRwB,aAAe,SAACZ,GACd,EAAKa,SAAS,CACZC,YAAa,CACXhB,KAAME,EAAEE,OAAOL,MACfH,IAAKqB,KAAKC,UAhBG,EAqBnBC,QAAU,SAACjB,GACTA,EAAEkB,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAC3B,GAAqB,KAAjBK,EAAQrB,KAAa,CACvB,IAAMuB,EAAQ,sBAAO,EAAKD,MAAM9B,OAAlB,CAAyB6B,IACvC,EAAKN,SAAS,CACZvB,MAAO+B,EACPP,YAAa,CACXhB,KAAM,GACNJ,IAAK,MAIX4B,QAAQC,IAAI,MAAO,EAAKH,MAAM9B,QAlCb,EAoCnBe,WAAa,SAACX,GACZ,IAAM8B,EAAa,EAAKJ,MAAM9B,MAAMmC,QAAO,SAACjC,GAAD,OAAUA,EAAKE,MAAQA,KAClE,EAAKmB,SAAS,CACZvB,MAAOkC,KAvCQ,EA0CnBvB,UAAY,SAACH,EAAMJ,GACjB,IAAMgC,EAAW,EAAKN,MAAM9B,MAC5BoC,EAASnC,KAAI,SAACC,GAIZ,OAHIA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,IAEP,KAET,EAAKe,SAAS,CACZvB,MAAOoC,KAhDT,EAAKN,MAAQ,CACX9B,MAAO,GACPwB,YAAa,CACXhB,KAAM,GACNJ,IAAK,KAPQ,E,qDAuDjB,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa+B,SAAUC,KAAKX,SACnC,2BACEtB,KAAK,OACLkC,YAAY,aACZhC,MAAO+B,KAAKR,MAAMN,YAAYhB,KAC9BC,SAAU6B,KAAKhB,eAEjB,4BAAQjB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEL,MAAOsC,KAAKR,MAAM9B,MAClBe,WAAYuB,KAAKvB,WACjBJ,UAAW2B,KAAK3B,iB,GAxEP6B,IAAMC,WCMVC,E,uKARX,OACE,yBAAKvC,UAAU,OACd,kBAAC,EAAD,W,GAJWqC,IAAMC,WCOJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.143a2ba8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./../ListItem.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItem(props) {\r\n  const items = props.items;\r\n\r\n  const listItems = items.map(item => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <input type=\"text\" id={item.key} value={item.text} \r\n              onChange={\r\n                  (e)=> props.setUpdate(e.target.value, item.key)\r\n                  }\r\n          />\r\n          <span>\r\n            <FontAwesomeIcon\r\n              className=\"faicons\"\r\n              icon=\"trash\"\r\n              onClick={() => props.deleteItem(item.key)}\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n    <FlipMove duration={300} easing='ease-in-out'>\r\n    {listItems} \r\n  </FlipMove>\r\n  </div>\r\n    \r\n  );\r\n}\r\nexport default ListItem;\r\n","import React from \"react\";\r\n\r\nimport \"../../src/App.css\";\r\nimport ListItems from \"./ListItem\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faTrash);\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        text: \"\",\r\n        key: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      currentItem: {\r\n        text: e.target.value,\r\n        key: Date.now(),\r\n      },\r\n    });\r\n  };\r\n\r\n  addItem = (e) => {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    if (newItem.text !== \"\") {\r\n      const newItems = [...this.state.items, newItem];\r\n      this.setState({\r\n        items: newItems,\r\n        currentItem: {\r\n          text: \"\",\r\n          key: \"\",\r\n        },\r\n      });\r\n    }\r\n    console.log(\"sad\", this.state.items);\r\n  };\r\n  deleteItem = (key) => {\r\n    const filterItem = this.state.items.filter((item) => item.key !== key);\r\n    this.setState({\r\n      items: filterItem,\r\n    });\r\n  };\r\n  setUpdate = (text, key) => {\r\n    const editItem = this.state.items\r\n    editItem.map((item) => {\r\n      if (item.key === key) {\r\n        item.text = text;\r\n      }\r\n      return true;\r\n    });\r\n    this.setState({\r\n      items: editItem,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Text\"\r\n              value={this.state.currentItem.text}\r\n              onChange={this.handleChange}\r\n            />\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n        </header>\r\n        <ListItems\r\n          items={this.state.items}\r\n          deleteItem={this.deleteItem}\r\n          setUpdate={this.setUpdate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React from 'react';\n\nimport './App.css';\nimport Home from './Components/Home';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Home  />\n      </div>\n\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}